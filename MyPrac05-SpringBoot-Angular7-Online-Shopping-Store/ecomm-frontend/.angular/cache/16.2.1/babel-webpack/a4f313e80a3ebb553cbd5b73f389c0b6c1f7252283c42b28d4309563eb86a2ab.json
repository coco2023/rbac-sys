{"ast":null,"code":"var _class;\nimport { BehaviorSubject, catchError, of, Subject, tap } from 'rxjs';\nimport { apiUrl } from '../../environments/environment.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nclass UserService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.nameTerms = new Subject();\n    this.name$ = this.nameTerms.asObservable();\n    const memo = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(memo));\n    this.currentUser = this.currentUserSubject.asObservable();\n    cookieService.set('currentUser', memo);\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(loginForm) {\n    const url = `${apiUrl}/login`;\n    return this.http.post(url, loginForm).pipe(tap(user => {\n      if (user && user.token) {\n        this.cookieService.set('currentUser', JSON.stringify(user));\n        if (loginForm.remembered) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n        }\n        console.log(user.name);\n        let name = user.name;\n        this.nameTerms.next(name);\n        this.currentUserSubject.next(user);\n        return user;\n      } else {\n        return null; // or some other default value\n      }\n    }), catchError(this.handleError('Login Failed', null)));\n  }\n  logout() {\n    // this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n    this.cookieService.delete('currentUser');\n  }\n  signUp(user) {\n    const url = `${apiUrl}/register`;\n    return this.http.post(url, user);\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.log(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { UserService };","map":{"version":3,"names":["BehaviorSubject","catchError","of","Subject","tap","apiUrl","UserService","constructor","http","cookieService","nameTerms","name$","asObservable","memo","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","set","currentUserValue","value","login","loginForm","url","post","pipe","user","token","stringify","remembered","setItem","console","log","name","next","handleError","logout","removeItem","delete","signUp","operation","result","error","i0","ɵɵinject","i1","HttpClient","i2","CookieService","factory","ɵfac","providedIn"],"sources":["D:\\1Learn\\2022CVProject\\20230222CogentTrain\\20230613Rbac\\rbac-sys\\MyPrac05-SpringBoot-Angular7-Online-Shopping-Store\\ecomm-frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {BehaviorSubject, catchError, Observable, of, Subject, tap} from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport {apiUrl} from '../../environments/environment.service';\n\nimport { JwtResponse } from '../response/JwtResponse';\nimport { User } from '../models/User';\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class UserService {\n\n  private currentUserSubject: BehaviorSubject<JwtResponse>;\n  public currentUser: Observable<JwtResponse>;\n  public nameTerms = new Subject<string>();\n  public name$ = this.nameTerms.asObservable();\n  constructor(private http: HttpClient,\n              private cookieService: CookieService) {\n      const memo = localStorage.getItem('currentUser') as string;\n      this.currentUserSubject = new BehaviorSubject<JwtResponse>(JSON.parse(memo));\n      this.currentUser = this.currentUserSubject.asObservable();\n      cookieService.set('currentUser', memo);\n  }\n\n  get currentUserValue() {\n      return this.currentUserSubject.value;\n  }\n\n\n  login(loginForm: { remembered: any; }): Observable<JwtResponse | null> {\n      const url = `${apiUrl}/login`;\n      return this.http.post<JwtResponse>(url, loginForm).pipe(\n          tap(user => {\n              if (user && user.token) {\n                  this.cookieService.set('currentUser', JSON.stringify(user));\n                  if (loginForm.remembered) {\n                      localStorage.setItem('currentUser', JSON.stringify(user));\n                  }\n                  console.log((user.name));\n                  let name:string = user.name!;\n                  this.nameTerms.next(name);\n                  this.currentUserSubject.next(user);\n                  return user;\n              } else {\n                return null; // or some other default value\n            }        \n          }),\n          catchError(this.handleError('Login Failed', null))\n      );\n  }\n\n  logout() {\n      // this.currentUserSubject.next(null);\n      localStorage.removeItem('currentUser');\n      this.cookieService.delete('currentUser');\n  }\n\n  signUp(user: User): Observable<User> {\n      const url = `${apiUrl}/register`;\n      return this.http.post<User>(url, user);\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n      return (error: any): Observable<T> => {\n\n          console.log(error); // log to console instead\n\n          // Let the app keep running by returning an empty result.\n          return of(result as T);\n      };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}